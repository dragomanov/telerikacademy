// Generated by CoffeeScript 1.7.1
(function() {
  var findSmallestAndBiggestProperties, i, n, num, numbersNotDivisibleBy21, obj, print, randomInt, randomNumbers, _i, _j, _len, _ref, _results,
    __hasProp = {}.hasOwnProperty;

  randomInt = function(min, max) {
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 100;
    }
    return min + Math.random() * (max - min + 1) >> 0;
  };

  print = function(str) {
    return document.writeln("" + str + " <br />");
  };

  findSmallestAndBiggestProperties = function(obj) {
    var prop, sortedProperties;
    sortedProperties = ((function() {
      var _results;
      _results = [];
      for (prop in obj) {
        if (!__hasProp.call(obj, prop)) continue;
        _results.push(prop);
      }
      return _results;
    })()).sort(function(a, b) {
      return a.localeCompare(b);
    });
    return [sortedProperties[0], sortedProperties.slice(-1)];
  };

  print("<br />Task 1:");

  print("N = " + (n = randomInt(1, 50)));

  print((function() {
    _results = [];
    for (var _i = 1; 1 <= n ? _i <= n : _i >= n; 1 <= n ? _i++ : _i--){ _results.push(_i); }
    return _results;
  }).apply(this).join(", "));

  print("<br />Task 2:");

  numbersNotDivisibleBy21 = (function() {
    var _j, _results1;
    _results1 = [];
    for (num = _j = 1; 1 <= n ? _j <= n : _j >= n; num = 1 <= n ? ++_j : --_j) {
      if (num % 21 !== 0) {
        _results1.push(num);
      }
    }
    return _results1;
  })();

  print(numbersNotDivisibleBy21.join(", "));

  print("<br />Task 3:");

  randomNumbers = (function() {
    var _j, _results1;
    _results1 = [];
    for (i = _j = 1; _j <= 10; i = ++_j) {
      _results1.push(randomInt());
    }
    return _results1;
  })();

  print("Sequence: " + randomNumbers.join(", "));

  print("Smallest number in sequence: " + Math.min.apply(Math, randomNumbers));

  print("Biggest number in sequence: " + Math.max.apply(Math, randomNumbers));

  print("<br />Task 4:");

  _ref = [document, window, navigator];
  for (_j = 0, _len = _ref.length; _j < _len; _j++) {
    obj = _ref[_j];
    print(("" + obj.constructor.name + ": ") + findSmallestAndBiggestProperties(obj));
  }

}).call(this);
