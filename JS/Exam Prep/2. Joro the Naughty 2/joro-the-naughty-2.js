// Generated by CoffeeScript 1.7.1
(function() {
  var Solve, test1, test2, test3, test4, test5;

  Solve = function(args) {
    var C, J, M, N, NUMBER_OF_JUMPS, R, SUM_OF_NUMBERS, caught, col, currJump, escaped, getNumberFromArgs, i, jumps, row, visited, _i, _j, _ref, _ref1;
    getNumberFromArgs = function(x, y) {
      return Number(args[x].split(" ")[y]);
    };
    N = getNumberFromArgs(0, 0);
    M = getNumberFromArgs(0, 1);
    J = getNumberFromArgs(0, 2);
    R = getNumberFromArgs(1, 0);
    C = getNumberFromArgs(1, 1);
    jumps = (function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 2, _ref = args.length; 2 <= _ref ? _i < _ref : _i > _ref; i = 2 <= _ref ? ++_i : --_i) {
        _results.push([getNumberFromArgs(i, 0), getNumberFromArgs(i, 1)]);
      }
      return _results;
    })();
    SUM_OF_NUMBERS = 0;
    NUMBER_OF_JUMPS = 0;
    escaped = false;
    caught = false;
    currJump = 0;
    visited = [];
    for (row = _i = 0; 0 <= N ? _i < N : _i > N; row = 0 <= N ? ++_i : --_i) {
      visited[row] = [];
      for (col = _j = 0; 0 <= M ? _j < M : _j > M; col = 0 <= M ? ++_j : --_j) {
        visited[row][col] = false;
      }
    }
    while (!(escaped || caught)) {
      if (!((0 <= (_ref = R + jumps[currJump][0]) && _ref < N) && (0 <= (_ref1 = C + jumps[currJump][1]) && _ref1 < M))) {
        escaped = true;
      }
      if (visited[R][C]) {
        caught = true;
      }
      currJump = ++currJump % J;
    }
    if (escaped) {
      return "escaped " + SUM_OF_NUMBERS;
    }
    if (caught) {
      return "caught " + NUMBER_OF_JUMPS;
    }
  };

  test1 = ["1 1 1", "0 0", "1 1"];

  test2 = ["2 4 2", "1 3", "2 2", "-3 3"];

  test3 = ["6 7 3", "0 0", "2 2", "-2 2", "3 -1"];

  test4 = ["500 500 1", "0 0", "0 10"];

  test5 = [];

  console.log(Solve(test1));

  console.log(Solve(test2));

  console.log(Solve(test3));

}).call(this);
