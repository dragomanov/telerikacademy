// Generated by CoffeeScript 1.7.1
(function() {
  define(['tech-store-models/item'], function(Item) {
    var Store;
    return Store = (function() {
      var NAME_MAX_CHARS, NAME_MIN_CHARS;

      NAME_MIN_CHARS = 6;

      NAME_MAX_CHARS = 30;

      function Store(name) {
        var _ref;
        this.name = name;
        this._items = [];
        if (!((NAME_MIN_CHARS <= (_ref = name.length) && _ref <= NAME_MAX_CHARS))) {
          throw new Error("Name must be between " + NAME_MIN_CHARS + " and " + NAME_MAX_CHARS + " characters!");
        }
      }

      Store.prototype.addItem = function(item) {
        if (!(item instanceof Item)) {
          throw new Error("Store can keep in stock only items of type Item");
        }
        this._items.push(item);
        return this;
      };

      Store.prototype.getAll = function() {
        return this._items.sort(function(a, b) {
          return a.name.localeCompare(b.name);
        });
      };

      Store.prototype.getSmartPhones = function() {
        var item, _i, _len, _ref, _results;
        _ref = this.getAll();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item.type === 'smart-phone') {
            _results.push(item);
          }
        }
        return _results;
      };

      Store.prototype.getMobiles = function() {
        var item, _i, _len, _ref, _ref1, _results;
        _ref = this.getAll();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if ((_ref1 = item.type) === 'smart-phone' || _ref1 === 'tablet') {
            _results.push(item);
          }
        }
        return _results;
      };

      Store.prototype.getComputers = function() {
        var item, _i, _len, _ref, _ref1, _results;
        _ref = this.getAll();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if ((_ref1 = item.type) === 'pc' || _ref1 === 'notebook') {
            _results.push(item);
          }
        }
        return _results;
      };

      Store.prototype.filterItemsByPrice = function(options) {
        var item, max, min, _i, _len, _ref, _ref1, _ref2, _ref3, _results;
        min = (_ref = options != null ? options.min : void 0) != null ? _ref : 0;
        max = (_ref1 = options != null ? options.max : void 0) != null ? _ref1 : Infinity;
        this._items.sort(function(a, b) {
          return a.price - b.price;
        });
        _ref2 = this._items;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          item = _ref2[_i];
          if ((min < (_ref3 = item.price) && _ref3 < max)) {
            _results.push(item);
          }
        }
        return _results;
      };

      Store.prototype.filterItemsByType = function(type) {
        var item, _i, _len, _ref, _results;
        _ref = this.getAll();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item.type === type) {
            _results.push(item);
          }
        }
        return _results;
      };

      Store.prototype.filterItemsByName = function(name) {
        var item, _i, _len, _ref, _results;
        _ref = this.getAll();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item.name.match(new RegExp(name, "i"))) {
            _results.push(item);
          }
        }
        return _results;
      };

      Store.prototype.countItemsByType = function() {
        var item, itemsByType, _i, _len, _name, _ref;
        itemsByType = [];
        _ref = this.getAll();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (itemsByType[_name = item.type] == null) {
            itemsByType[_name] = 0;
          }
          itemsByType[item.type]++;
        }
        return itemsByType;
      };

      return Store;

    })();
  });

}).call(this);
